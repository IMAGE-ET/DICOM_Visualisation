/**
 * @author Craig Parkinson
 * @title visualisation
 * @description create four different view ports displaying CT Data
 */

#include	<stdlib.h>
#include	<GL/glut.h>
#include	<math.h>

static int	left_click = GLUT_UP;
static int	right_click = GLUT_UP;
static int	xold;
static int	yold;
int	width, height, wh, hw;
static float	rotate_x = 30;
static float	rotate_y = 15;
static float	alpha = 0;
static float	beta = 0;

/**
 * @title Teapot
 * @description wire frame of a teapot
 */
void Teapot(void)
{
  /* Axis */
  glBegin(GL_LINES);
  glColor3f(1, 0, 0); glVertex3f(-1, -1, -1); glVertex3f( 1, -1, -1);
  glColor3f(0, 1, 0); glVertex3f(-1, -1, -1); glVertex3f(-1,  1, -1);
  glColor3f(0, 0, 1); glVertex3f(-1, -1, -1); glVertex3f(-1, -1,  1);
  glEnd();

  glRotatef(beta, 1, 0, 0);
  glRotatef(alpha, 0, 1, 0);
  glColor3f(1, 1, 1);

  glutWireTeapot(0.5);
}

/**
 * @title rectangle
 * @description red rectangle
 */
void rectangle(void)
{
	glBegin(GL_LINES);
	glColor3f(1, 0, 0); glVertex2f(-1, -1); glVertex2f( 1, -1);
	glEnd();
}

/**
 * @Title DisplayFunc
 * @description update rendering
 */
void DisplayFunc(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glLoadIdentity();
	glViewport(0, 0, width, height);
	glBegin(GL_LINES);
	glColor3f(1, 0, 0); glVertex2f(-1, 0); glVertex2f( 1, -1);
	glEnd();

/**
	glViewport(width/2, 0, width/2, height/2);
	glPushMatrix();
	glTranslatef(0, 0, -10);
	glRotatef(rotate_y, 1, 0, 0);
	glRotatef(rotate_x, 0, 1, 0);
	Teapot();
	glPopMatrix();
	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
	glLoadIdentity();
	glOrtho(-1.2 * wh, 1.2 * wh, -1.2, 1.2, -1.2, 1.2);
	glMatrixMode(GL_MODELVIEW);

	glViewport(0, height/2, width/2, height/2);
	glPushMatrix();
	rectangle();
	glPopMatrix();

	glViewport(width/2, height/2, width/2, height/2);
	glPushMatrix();
	Teapot();
	glPopMatrix();

	glViewport(0, 0, width/2, height/2);
	glPushMatrix();
	glRotatef(90, 1, 0, 0);
	Teapot();
	glPopMatrix();

	glMatrixMode(GL_PROJECTION);
	glPopMatrix();
	glMatrixMode(GL_MODELVIEW);
**/
	glFlush();
	glutSwapBuffers();
}

/**
 * @title ReshapeFunc
 * @description called when reshaped or resized
 */
void ReshapeFunc(int new_width, int new_height)
{
	width = new_width;
	height = new_height;

	hw = height/(float) width;
	wh = width/(float) height;

	glMatrixMode(GL_PROJECTION);

	glLoadIdentity();
	gluPerspective(20 * sqrtf(1 + hw * hw), wh, 8, 12);

	glMatrixMode(GL_MODELVIEW);
	glutPostRedisplay();
}

/**
 * @title KeyboardFunc
 * @description called on keyboard use
 */
void KeyboardFunc(unsigned char key, int x, int y)
{
	//avoid warning, no effect
	xold = x;
	yold = y;

	if ('q' == key || 'Q' == key || 27 == key)
	{
      exit(0);
	}
}

/**
 * @title MouseFunc
 * @description called on mouse button
 */
void MouseFunc(int button, int state, int x, int y)
{
	if(GLUT_LEFT_BUTTON == button)
	{
		left_click = state;
	}

	if(GLUT_RIGHT_BUTTON == button)
	{
		right_click = state;
	}

	xold = x;
	yold = y;
}

/**
 * @title MotionFunc
 * @description called when mouse moved
 */
void MotionFunc(int x, int y)
{
	if(GLUT_DOWN == left_click)
	{
		rotate_y = rotate_y + (y - yold) / 5.f;
		rotate_x = rotate_x + (x - xold) / 5.f;

		if(rotate_y > 90)
		{
			rotate_y = 90;
		}

		if(rotate_y < -90)
		{
			rotate_y = -90;
		}

		glutPostRedisplay();
    }

	if(GLUT_DOWN == right_click)
    {
		beta = beta + (y - yold) / 2.f;
		alpha = alpha + (x - xold) / 2.f;

		glutPostRedisplay();
    }

	xold = x;
	yold = y;
}

/**
 * @title main
 * @description Initialise scene
 */
int	main(int argc, char **argv)
{
	/**
	 * create window
	 */
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);

	width = glutGet(GLUT_SCREEN_WIDTH);
	height = glutGet(GLUT_SCREEN_HEIGHT);
	width /= 2;
	height /= 2;

	glutInitWindowSize(width,height);
	glutInitWindowPosition(width/2,height/2);
	glutCreateWindow("Visualisation");

	glClearColor(0, 0, 0, 0);
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	/**
	 * call backs
	 */
	glutDisplayFunc(&DisplayFunc);
	glutReshapeFunc(&ReshapeFunc);
	glutKeyboardFunc(&KeyboardFunc);
	glutMouseFunc(&MouseFunc);
	glutMotionFunc(&MotionFunc);

	glutMainLoop();

	return 0;
}
